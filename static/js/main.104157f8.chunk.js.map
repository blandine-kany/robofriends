{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardsArray","map","user","i","Scroll","props","style","overflowY","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mPAiBeA,EAfF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OAEE,aADA,CACA,qBACE,sBAAKC,UAAU,uDAAf,UACE,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,gCACE,6BAAKF,IACL,4BAAIC,aCaCK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAOZC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OACE,cAAC,EAAD,CAEET,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZM,EAAOI,GAAGT,OAOrB,OAAO,gCAAMM,EAAN,QCJMI,EAdA,SAACC,GACd,OACE,qBACEC,MAAO,CACLC,UAAW,SAEXC,OAAQ,SAJZ,SAOGH,EAAMI,YCMEC,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,mCACA,qBAAKhB,UAAU,MAAf,SACE,uBACEA,UAAU,mCACViB,KAAK,SACLC,YAAY,iBACZC,SAAUH,SCYHI,E,kDAlBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAU,GAHL,E,qDAOb,WACIC,KAAKC,SAAS,CAACF,UAAU,M,oBAE7B,WACI,OAAGC,KAAKF,MAAMC,SACP,sFAEAC,KAAKb,MAAMI,a,GAhBEW,aCqDbC,E,kDA/Cb,aAAe,IAAD,8BACZ,gBAeFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAf1C,EAAKV,MAAQ,CACXjB,OAAQ,GACRyB,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKZ,SAAS,CAAEpB,OAAQgC,S,oBAQ9B,WACE,MAAgCb,KAAKF,MAA7BjB,EAAR,EAAQA,OAAQyB,EAAhB,EAAgBA,YACVQ,EAAiBjC,EAAOkC,QAAO,SAACC,GACpC,OAAOA,EAAM1C,KACV2C,oBACAC,SAASZ,EAAYW,wBAE1B,OAAKpC,EAAOsC,OAIR,mCACE,sBAAK1C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWgB,aAAcO,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACA,cAAC,EAAD,CAAUvB,OAAQiC,aATnB,oBAAIrC,UAAU,KAAd,yB,GA7BK2C,IAAMlB,WCKTmB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAKhDX,M","file":"static/js/main.104157f8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    // <h1>Robo-Friends</h1>\r\n    <>\r\n      <div className=\"tc bg-light-green dib br3  pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  // When looping in react a key property must be created\r\n  // the vDOM tracks the array elements but without a key prop\r\n  // if one element gets modified or deleted react won't know\r\n  // which one is which so the entire DOM would have to be reloaded\r\n  // which is something we don't want - minimise DOM manipulation\r\n  // So the key prop has to be something unique & doesn't change\r\n  const cardsArray = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={robots[i].id}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardsArray} </div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        // border: \"5px solid black\",\r\n        height: \"800px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <>\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa2 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search friends\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({hasError: true});\r\n    }\r\n    render() {\r\n        if(this.state.hasError)\r\n        return <h1> Sorry, Bill Gates is hacking us again ðŸ˜ž </h1>;\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErroBoundary from '../components/ErrorBoundary';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name\r\n        .toLocaleLowerCase()\r\n        .includes(searchfield.toLocaleLowerCase());\r\n    });\r\n    if (!robots.length) {\r\n      return <h1 className=\"tc\">loading</h1>;\r\n    } else {\r\n      return (\r\n        <>\r\n          <div className=\"tc\">\r\n            <h1 className=\"f1\">Robofriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n              <ErroBoundary>\r\n              <CardList robots={filteredRobots} />\r\n              </ErroBoundary>\r\n            </Scroll>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}